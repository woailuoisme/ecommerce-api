<?php

namespace App;

use App\Exceptions\ApiException;
use App\Models\Cart;
use App\Models\Order;
use App\Models\Product;
use App\Models\ProductReview;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Storage;
use Tymon\JWTAuth\Contracts\JWTSubject;

class User extends Authenticatable implements JWTSubject
{
    use Notifiable;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
//        static::created(static::createCartClause());
    }

//    public static function createCartClause(){
//        return function (){
//            $this->cart()->create();
//        };
//    }

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
//    protected $fillable = [
//        'name', 'email', 'password',
//    ];

    protected $guarded = [];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    public function setPasswordAttribute($value): void
    {
        $this->attributes['password'] = Hash::make($value);
    }

    public function setResetTokenAttribute($value): void
    {
//        $this->attributes['reset_token'] = Uuid::uuid4()->toString();
    }

    public function checkPassword($value)
    {
        return Hash::check($value, $this->attributes['password']);
    }

    public function getAvatarUrlAttribute(){
        return Storage::url($this->avatar);
    }

    public function cart(){
        return $this->hasOne(Cart::class);
    }

    public const TYPE_LIKE = 1;
    public const TYPE_UNLIKE = -1;

    public const USER_ROLE_ADMIN = 'admin';  // 管理员
    public const USER_ROLE_GENERAL = 'general';    // 普通用户

    public const USER_ROLE = [
        self::USER_ROLE_ADMIN   => '管理员',
        self::USER_ROLE_GENERAL => '普通用户',
    ];

    public function getIsAdminAttribute(): bool
    {
        return $this->attributes['role'] === self::USER_ROLE_ADMIN;
    }


    public function productReviews(): \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(ProductReview::class);
    }

    public function orders(): \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(Order::class);
    }

    public function favoriteProducts(): \Illuminate\Database\Eloquent\Relations\BelongsToMany
    {
        return $this->belongsToMany(Product::class, 'user_favorite_product')->withTimestamps();
    }
    public function existsFavoriteProduct($product_id): bool
    {
        return $this->favoriteProducts()->wherePivot('product_id', $product_id)->exists();
    }

    public function hasFavoriteProducts(): bool
    {
        return $this->favoriteProductsCount() > 0;
    }

    public function favoriteProduct($product_id, $cancel = false): void
    {
        $cancel ? $this->favoriteProducts()->detach($product_id) : $this->favoriteProducts()->attach($product_id);
    }

    public function favoriteProductsCount():int
    {
        return $this->favoriteProducts->count();
    }

    public function addFavoriteToCart($product_id): void
    {
        if ($this->existsFavoriteProduct($product_id)) {
            /** @var Cart $cart */
            $cart = $this->cart;
            $cart->addProductToCart($product_id);
            $this->favoriteProducts()->detach($product_id);
        } else {
            throw new ApiException("product is't been favorite");
        }
    }

    public function checkoutFavoriteProduct(): void
    {
        /** @var Cart $cart */
        $cart = $this->cart;
        if (empty($cart)){
            $cart = Cart::create([
                'user_id' => $this->id,
            ]);
        }
        if ($this->hasFavoriteProducts()) {
            foreach ($this->favoriteProducts as $product) {
                $cart->products()->attach($product->id, ['quantity' => 1]);
            }
            $this->favoriteProducts()->detach();
        }else{
            throw new ApiException('User is\'t favorite any product');
        }
    }

    public function likeReviews(): BelongsToMany
    {
        return $this->belongsToMany(Product::class, 'user_like_review','user_id','review_id')
            ->withPivot('like')->withTimestamps();
    }

    public function likeReviewsCount()
    {
        return $this->likeReviews->count();
    }

    public function existsLikeReviews($product_id): bool
    {
        return $this->likeReviews()->wherePivot('product_id', $product_id)->exists();
    }

    public function likeReview($product_id, $like): void
    {
        if ($this->existsLikeReviews($product_id)) {
            $this->likeReviews()->updateExistingPivot($product_id, ['like' => $like]);
        }
        $this->likeReviews()->attach($product_id, ['like' => $like]);
    }

    public function hasLikeReviews(): bool
    {
        return $this->likeReviewsCount() > 0;
    }


    public function scopeWithMostBlogPosts(Builder $query)
    {
        return $query->withCount('blogPosts')->orderBy('blog_posts_count', 'desc');
    }

//    public function scopeWithMostBlogPostsLastMonth(Builder $query)
//    {
//        return $query->withCount(['blogPosts' => function (Builder $query) {
//            $query->whereBetween(static::CREATED_AT, [now()->subMonths(1), now()]);
//        }])->has('blogPosts', '>=', 1)
//            ->orderBy('blog_posts_count', 'desc');
//    }
//    public function reviewProducts(){
////        return $this->hasManyThrough()
//    }

    public function scopeWithMostCommentsLastMonth(Builder $query)
    {
        return $query->withCount([
            'reviews' => function (Builder $query) {
                $query->whereBetween(static::CREATED_AT, [now()->subMonths(1), now()]);
            },
        ])->has('reviews', '>=', 1)
            ->orderBy('reviews_count', 'desc');
    }

    public function scopeThatHasCommentedOnProduct(Builder $query, Product $product)
    {
        return $query->whereHas('reviews', function ($query) use ($product) {
            return $query->where('product_id', '=', $product->id);
        });
    }


    /**
     * Get the identifier that will be stored in the subject claim of the JWT.
     *
     * @return mixed
     */
    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    /**
     * Return a key value array, containing any custom claims to be added to the JWT.
     *
     * @return array
     */
    public function getJWTCustomClaims()
    {
        return [];
    }
}
